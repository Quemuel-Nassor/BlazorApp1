@using Blazorise.DataGrid
@using BlazorApp1.Extensions
@using BlazorApp1.Services
@inject DataService service
@inherits DataGridBase

@page "/gridsample"

<PageTitle>Grid Sample</PageTitle>

<h1>Grid Sample</h1>

<p>This component demonstrates fetching data from the server.</p>

<Button class="btn-primary" Clicked="Request">Get Items</Button>

<DataGrid TItem="Sample"
          @ref="dataGridRef"
          Data="@Items"
          PageSize="@PageSize"
          ReadData="@OnReadData"
          TotalItems="@TotalItems"
          SortMode="DataGridSortMode.Single"
          ShowPager
          Responsive>

    <DataGridColumns>
        <DataGridCommandColumn />
        <DataGridColumn Width="80" Field="@nameof(Sample.Id)" Caption="Id"></DataGridColumn>
        <DataGridColumn Width="80" Field="@nameof(Sample.Name)" Caption="Name"></DataGridColumn>
        <DataGridColumn Width="80" Field="@nameof(Sample.CreationTime)" Caption="Date" DisplayFormat="{0:dd/MM/yyyy}"></DataGridColumn>
        <DataGridColumn Width="80" Field="@nameof(Sample.Action)" Caption="Action"></DataGridColumn>
    </DataGridColumns>
    <LoadingTemplate>
        <div class="row w-100 mx-0 justify-content-center">
            <div class="spinner-border m-5 text-center" style="color: var(--bs-primary);" role="status">
                <span class="sr-only"></span>
            </div>
        </div>
    </LoadingTemplate>
    <EmptyTemplate>
        <div class="row w-100 mx-0 justify-content-center">
            <div class="m-5 text-center">
                NÃ£o existem itens
            </div>
        </div>
    </EmptyTemplate>
</DataGrid>

@code {
    int PageNumber;
    int PageSize = 10;
    int TotalItems;
    string Sorting = "Id";
    private List<Sample> Items { get; set; } = new();
    DataGrid<Sample> dataGridRef;

    protected override void OnInitialized()
    {
        OnReadDataAction += async () =>
        {
            await Request();
        };
    }

    public async Task Request()
    {
        PageNumber = GridPageNumber;
        if (PageSize != GridPageSize) PageSize = GridPageSize;
        Sorting = String.IsNullOrWhiteSpace(GridSorting) ? Sorting : GridSorting;

        await dataGridRef.Reload();
        var result = await service.GetPaged(PageNumber, PageSize, Sorting);
        Items = result.items;
        TotalItems = result.total;
        StateHasChanged();
    }
}